problems:
  - name: Barman
    year: 2011
    author: Sergio Jimenez Celorrio
    description: >
      In this domain, there is a robot barman that manipulates drink dispensers, glasses, and a shaker.
      The goal is to find a plan of the robot’s actions that serves a desired set of drinks. In this
      domain deletes of actions encode relevant knowledge given that robot hands can only grasp one
      object at a time and given that glasses need to be empty and clean to be filled.
    modelPath: "../database/barman/domain.pddl"
    instancesPath: "../database/barman/instances.zip"
    source: "https://github.com/potassco/pddl-instances/tree/master/ipc-2011/domains/barman-sequential-satisficing"
    variations:
      - variation:
          name: Sequential & Satisficing
          description: >
            In this domain, there is a robot barman that manipulates drink dispensers, glasses, and a shaker.
            The goal is to find a plan of the robot’s actions that serves a desired set of drinks. In this
            domain deletes of actions encode relevant knowledge given that robot hands can only grasp one
            object at a time and given that glasses need to be empty and clean to be filled.
      - variation:
          name: Sequential & Optimal
          description: >
            In this domain, there is a robot barman that manipulates drink dispensers, glasses, and a shaker.
            The goal is to find a plan of the robot’s actions that serves a desired set of drinks. In this
            domain deletes of actions encode relevant knowledge given that robot hands can only grasp one
            object at a time and given that glasses need to be empty and clean to be filled.
      - variation:
          name: Sequential & Multicore
          description: >
            In this domain, there is a robot barman that manipulates drink dispensers, glasses, and a shaker.
            The goal is to find a plan of the robot’s actions that serves a desired set of drinks. In this
            domain deletes of actions encode relevant knowledge given that robot hands can only grasp one
            object at a time and given that glasses need to be empty and clean to be filled.
    path: random

  - name: Elevator
    description: >
      The idea for this domain came up from the Miconic domain of IPC2, however the domain has been designed from scratch. The scenario is the following: There is a building with N + 1 floors, numbered from 0 to N. The building can be separated in blocks of size M + 1, where M divides N. Adjacent blocks have a common floor. For example, suppose N = 12 and M = 4, then we have 13 floors in total (ranging from 0 to 12), which form 3 blocks of 5 floors each, being 0 to 4, 4 to 8, and 8 to 12.

      The building has K fast (accelarating) elevators that stop only in floors that are multiple of M / 2 (so M has to be an even number). Each fast elevator has a capacity of X persons. Furthermore, within each block, there are L slow elevators, that stop at every floor of the block. Each slow elevator has a capacity of Y persons (usually Y < X).

      There are costs associated with each elavator starting/stoping and moving. In particular, fast (accelarating) elevators have negligible cost of starting/stoping but have significant cost while moving. On the other hand, slow (constant speed) elevators have significant cost when starting/stoping and negligible cost while moving. Travelling times between floors are given for any type of elevator, taking into account the constant speed of the slow elevators and the constant acceleration of the fast elevators.

      There are several passengers, for which their current location (i. e., the floor they are) and their destination are given. The planning problem is to find a plan that moves the passengers to their destinations while it maximizes some criterion.
    modelPath: "../database/elevator/domain.pddl"
    instancesPath: "../database/elevator/instances.zip"
    author: "Unknown"
    path: random
    source: https://github.com/potassco/pddl-instances/tree/master/ipc-2011/domains/elevator-sequential-satisficing
    year: 2011
    variations:
      - variation:
          name: Sequential & Satisficing
          description: "{{ site.data.problems.problems[1].description }}"
      - variation:
          name: Sequential & Optimal
          description: "{{ site.data.problems.problems[1].description }}"
      - variation:
          name: Sequential & Multicore
          description: "{{ site.data.problems.problems[1].description }}"

  - name: Match Cellar
    source: "https://github.com/potassco/pddl-instances/tree/master/ipc-2011/domains/match-cellar-temporal-satisficing"
    year: 2011
    description: "Domain is inspired by a paper by Long and Fox. The main feature of this domain is that a lighted match is concurrently required to fix a fuse."
    author: Bharat Ranjan Kavuluri
    modelPath: "../database/matchcellar/domain.pddl"
    instancesPath: "../database/matchcellar/instances.zip"
    variations:
      - name: Temporal & Satisficing
        description: "{{ site.data.problems.problems[2].description }}"
    path: random

    
